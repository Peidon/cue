@startuml
namespace flow {
    class Config << (S,Aquamarine) >> {
        + Root cue.Path
        + InferTasks bool
        + IgnoreConcrete bool
        + FindHiddenTasks bool
        + UpdateFunc <font color=blue>func</font>(*Controller, *Task) error

    }
    class Controller << (S,Aquamarine) >> {
        - cfg Config
        - isTask TaskFunc
        - inst cue.Value
        - valueSeqNum int64
        - env *adt.Environment
        - conjuncts []adt.Conjunct
        - conjunctSeq int64
        - taskCh <font color=blue>chan</font> *Task
        - opCtx *adt.OpContext
        - context context.Context
        - cancelFunc context.CancelFunc
        - taskStats stats.Counts
        - mut *sync.Mutex
        - done bool
        - keys <font color=blue>map</font>[string]*Task
        - tasks []*Task
        - nodes <font color=blue>map</font>[*adt.Vertex]*Task
        - errs errors.Error

        - cancel()
        - addErr(err error, msg string)
        - runLoop()
        - markReady(t *Task)
        - updateValue() bool
        - updateTaskValue(t *Task)
        - updateTaskResults(t *Task) bool
        - initTasks()
        - findRootTasks(v cue.Value)
        - getTask(scope *Task, v cue.Value) *Task
        - tagChildren(n *adt.Vertex, t *Task)
        - findImpliedTask(d dep.Dependency) *Task
        - markTaskDependencies(t *Task, n *adt.Vertex)
        - inRoot(n *adt.Vertex) bool

        + Stats() stats.Counts
        + Tasks() []*Task
        + Run(ctx context.Context) error
        + Value() cue.Value

    }
    interface Runner  {
        + Run(t *Task, err error) error

    }
    class RunnerFunc << (S,Aquamarine) >> {
        + Run(t *Task, err error) error

    }
    class State << (S,Aquamarine) >> {
        + String() string

    }
    class Task << (S,Aquamarine) >> {
        - c *Controller
        - ctxt *adt.OpContext
        - r Runner
        - index int
        - path cue.Path
        - key string
        - labels []adt.Feature
        - update adt.Expr
        - deps <font color=blue>map</font>[*Task]bool
        - pathDeps <font color=blue>map</font>[string][]*Task
        - conjunctSeq int64
        - valueSeq int64
        - v cue.Value
        - err errors.Error
        - state State
        - depTasks []*Task
        - stats stats.Counts

        - done() bool
        - isReady() bool
        - vertex() *adt.Vertex
        - addDep(path string, dep *Task)

        + Stats() stats.Counts
        + Context() context.Context
        + Path() cue.Path
        + Index() int
        + Fill(x <font color=blue>interface</font>{}) error
        + Value() cue.Value
        + Dependencies() []*Task
        + PathDependencies(p cue.Path) []*Task
        + Err() error
        + State() State

    }

    class flow.RunnerFunc << (T, #FF7700) >>  {
    }
    class flow.State << (T, #FF7700) >>  {
    }
    class flow.TaskFunc << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(cue.Value) (Runner, error)" as fontcolorbluefuncfontcueValueRunnererror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"flow.Runner" <|-- "flow.RunnerFunc"

"flow.Config" o-- "cue.Path"

"flow.<font color=blue>func</font>(*Task) error" #.. "flow.RunnerFunc"
"flow.fontcolorbluefuncfontcueValueRunnererror" #.. "flow.TaskFunc"

"flow.Controller" *-- "cue.Value"
"flow.Controller" *-- "flow.Task"

"flow.Task" ..> "flow.State"

"flow.Task" *-- "flow.Runner"
"flow.Controller" *-- "flow.TaskFunc"
"flow.Controller" o-- "flow.Config"
@enduml
